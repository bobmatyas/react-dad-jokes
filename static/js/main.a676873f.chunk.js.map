{"version":3,"sources":["show-dad-joke.js","dad-joke.js","header.js","imessage.js","App.js","serviceWorker.js","index.js"],"names":["ShowDadJoke","props","react_default","a","createElement","className","joke","DadJoke","state","data","loading","_this2","this","console","log","setState","fetch","headers","Accept","User-Agent","then","json","show_dad_joke_ShowDadJoke","React","Component","Header","dadPhoto","dadPhotoList","concat","Math","floor","random","length","getRandomDadPhoto","src","alt","Imessage","time","Date","toLocaleTimeString","hour","minute","App","header_Header","imessage_Imessage","dad_joke","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEaA,EAAc,SAACC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZJ,EAAMK,QC0BAC,6MA1BbC,MAAQ,CAACC,KAAM,GAAIC,SAAS,sFAER,IAAAC,EAAAC,KAClBC,QAAQC,IAAI,4BACZF,KAAKG,SAAS,CAACL,SAAS,IACxBM,MAAM,8BAA+B,CACnCC,QAAS,CACPC,OAAU,mBACVC,aAAc,aAGfC,KAAK,SAAAX,GAAI,OAAIA,EAAKY,SAClBD,KAAK,SAAAX,GAAI,OAAIE,EAAKI,SAAS,CAACN,OAAMC,SAAS,GAAQ,WAChDG,QAAQC,IAAIH,EAAKH,MAAMC,2CAO7B,OACEP,EAAAC,EAAAC,cAACkB,EAAD,CAAahB,KAAMM,KAAKJ,MAAMC,KAAKH,cAvBnBiB,IAAMC,WCFfC,EAAS,WACpB,IAOMC,EALoB,SAACC,GAEzB,MADc,kBAAAC,OAAqBD,EAAaE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAaK,SAA1E,QAICC,CAPI,CAAC,KAAM,KAAM,KAAM,KAAM,OAS9C,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAK8B,IAAKR,EAAUS,IAAI,MAAM9B,UAAU,uBACxCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,OAAsCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAAhB,SCdjC+B,EAAW,WAEtB,IAAMC,GAAO,IAAIC,MAAOC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAO,YAExE,OACEvC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,WAAX,SACOiC,MCOAK,MAVf,WACE,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.a676873f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const ShowDadJoke = (props) => {\r\n  return (\r\n    <section>\r\n      <div className=\"joke\">\r\n        {props.joke}\r\n      </div>\r\n    </section>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport {ShowDadJoke} from './show-dad-joke'\r\n\r\nclass DadJoke extends React.Component {\r\n\r\n  state = {data: [], loading: false};\r\n\r\n  componentDidMount() {\r\n    console.log('The component is mounted');\r\n    this.setState({loading: true});\r\n    fetch('https://icanhazdadjoke.com/', {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': '90sdadz'\r\n      }\r\n    })\r\n      .then(data => data.json())\r\n      .then(data => this.setState({data, loading: false}, () => {\r\n          console.log(this.state.data);\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <ShowDadJoke joke={this.state.data.joke} />\r\n    );  \r\n  }\r\n}\r\n\r\nexport default DadJoke;","import React from 'react';\r\n\r\nexport const Header = () => {\r\n  const dadPhotoList = [\"01\", \"02\", \"03\", \"04\", \"05\"];\r\n\r\n  const getRandomDadPhoto = (dadPhotoList) => {\r\n    let dadDataSrc = `./imgs/tv-dads/${dadPhotoList[Math.floor(Math.random() * dadPhotoList.length)]}.jpg`;\r\n    return dadDataSrc;\r\n  }\r\n\r\n  const dadPhoto = getRandomDadPhoto(dadPhotoList);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__container\">\r\n        <img src={dadPhoto} alt=\"dad\" className=\"header__dad__photo\" />\r\n        <h2 className=\"header__dad__text\">Dad <span className=\"header__dad__text__arrow\">></span></h2>\r\n      </div>\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Imessage = () => {\r\n\r\n  const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"imessage\">\r\n        <p>iMessage<br />\r\n        Today {time}</p>\r\n      </div>\r\n    </section>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\n\nimport DadJoke from './dad-joke';\nimport {Header} from './header';\nimport {Imessage} from './imessage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Imessage />\n      <DadJoke />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}